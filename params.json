{
  "name": "Instagramapi",
  "tagline": "A wrapper on instagram api for android",
  "body": "\r\nInstagram API\r\n============\r\nA wrapper on instagram API for android.\r\n\r\nDownload\r\n--------\r\n####Gradle:\r\n```groovy\r\ncompile 'com.github.sayyam:instagramapi:0.0.4'\r\n```\r\n####Maven:\r\n```xml\r\n<dependency>\r\n  <groupId>com.github.sayyam</groupId>\r\n  <artifactId>instagramapi</artifactId>\r\n  <version>0.0.4</version>\r\n  <type>pom</type>\r\n</dependency>\r\n```\r\n\r\nUsage\r\n--------\r\n\r\n####Include Application's Client Id and Redirect Uri:\r\nAdd following meta tags in ```<applicatio>``` tag of your ```AndroidManifest```.\r\n\r\n```xml\r\n        <meta-data\r\n            android:name=\"com.instagram.instagramapi.InstagramAppClientId\"\r\n            android:value=\"PUT-YOUR-CLIENT-ID-HERE\" />\r\n\r\n        <meta-data\r\n            android:name=\"com.instagram.instagramapi.InstagramAppRedirectURL\"\r\n            android:value=\"PUT-YOUR-REDIRECT-URI-HERE\" />\r\n```\r\nYou can get above credentials from [Instagram Developrs Portal](https://www.instagram.com/developer/ \"Instagram Developrs Portal\").\r\n\r\n####Initiate the authorization process:\r\nYou can start the ```InstagramEngine``` in two different ways:\r\n1-Intent\r\n2-InstagramLoginButton\r\n\r\n####1- Initiate the authorization process via ```Intent```.\r\n\r\n##### Create an intent:\r\n```java\r\n\r\n    String[] scopes = {InstagramKitLoginScope.BASIC, InstagramKitLoginScope.COMMENTS};\r\n    \r\n            Intent intent = new Intent(SampleActivity.this, InstagramAuthActivity.class);\r\n            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP |\r\n                    Intent.FLAG_ACTIVITY_SINGLE_TOP);\r\n\r\n            intent.putExtra(InstagramEngine.TYPE, InstagramEngine.TYPE_LOGIN);\r\n            //add scopes if you want to have more than basic access\r\n            intent.putExtra(InstagramEngine.SCOPE, scopes);\r\n            \r\n            startActivityForResult(intent, 0);\r\n```\r\n##### Handle Login Result:\r\n\r\n```java\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n\r\n        switch (requestCode) {\r\n            case 0:\r\n\r\n                if (resultCode == RESULT_OK) {\r\n\r\n                    Bundle bundle = data.getExtras();\r\n\r\n                    if (bundle.containsKey(InstagramKitConstants.kSessionKey)) {\r\n\r\n                        IGSession session = (IGSession) bundle.getSerializable(InstagramKitConstants.kSessionKey);\r\n\r\n                        Toast.makeText(SampleActivity.this, \"Woohooo!!! User trusts you :) \" + session.getAccessToken(),\r\n                                Toast.LENGTH_LONG).show();\r\n\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n\r\n    }\r\n```\r\n\r\n####Initiate the login process via ```InstagramLoginButton```:\r\n\r\n#####Add ```InstagramLoginButton``` in your layout\r\n```xml\r\n        <com.instagram.instagramapi.widgets.InstagramLoginButton\r\n            android:id=\"@+id/instagramLoginButton\"\r\n            android:layout_width=\"200dp\"\r\n            android:layout_height=\"55dp\"\r\n            android:text=\"Login Button\" />\r\n```\r\n#####Initialize ```InstagramLoginButton``` in your ```Activity```\r\n```java\r\n    String[] scopes = {InstagramKitLoginScope.BASIC, InstagramKitLoginScope.COMMENTS};\r\n    \r\n InstagramLoginButton instagramLoginButton;\r\n instagramLoginButton.setInstagramLoginCallback(instagramLoginCallbackListener);\r\n //if you dont specify scopes, you will have basic access.\r\n instagramLoginButton.setScopes(scopes);\r\n\r\n```\r\n#####Handle Login callback\r\n```java\r\n    InstagramLoginCallbackListener instagramLoginCallbackListener = new InstagramLoginCallbackListener() {\r\n        @Override\r\n        public void onSuccess(IGSession session) {\r\n\r\n            Toast.makeText(SampleActivity.this, \"Wow!!! User trusts you :) \" + session.getAccessToken(),\r\n                    Toast.LENGTH_LONG).show();\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onCancel() {\r\n            Toast.makeText(SampleActivity.this, \"Oh Crap!!! Canceled.\",\r\n                    Toast.LENGTH_LONG).show();\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onError(InstagramException error) {\r\n            Toast.makeText(SampleActivity.this, \"User does not trust you :(\\n \" + error.getMessage(),\r\n                    Toast.LENGTH_LONG).show();\r\n\r\n        }\r\n    };\r\n```\r\n\r\n##### Fetch User details:\r\n\r\n\r\n#####Get user details via ```getUserDetails()```:\r\n```java\r\nInstagramEngine.getInstance(SampleActivity.this).getUserDetails(instagramUserResponseCallback);\r\n```\r\n#####Handle Response in callback\r\n```java\r\n    InstagramAPIResponseCallback<IGUser> instagramUserResponseCallback = new InstagramAPIResponseCallback<IGUser>() {\r\n        @Override\r\n        public void onResponse(IGUser responseObject, IGPagInfo pageInfo) {\r\n\r\n            Toast.makeText(SampleActivity.this, \"Username: \" + responseObject.getUsername(),\r\n                    Toast.LENGTH_LONG).show();\r\n        }\r\n\r\n        @Override\r\n        public void onFailure(InstagramException exception) {\r\n            Log.v(\"SampleActivity\", \"Exception:\" + exception.getMessage());\r\n        }\r\n    };\r\n```\r\n\r\n####Logout user:\r\n\r\n```java\r\nInstagramEngine.getInstance(SampleActivity.this).logout();\r\n```\r\n####Exception Handling:\r\nIn case of exceptions like insufficient scope or invalid parameters you will get InstagramException in onFailure og your callback.\r\n```java\r\n           InstagramAPIResponseCallback<IGUser> instagramUserResponseCallback = new InstagramAPIResponseCallback<IGUser>() {\r\n       ...\r\n        @Override\r\n        public void onFailure(InstagramException exception) {\r\n            Log.v(\"Exception\", \"Exception:\" + exception.getMessage());\r\n        }\r\n        \r\n        }\r\n```\r\n\r\n\r\n\r\nLicense\r\n--------\r\n\r\n    Copyright 2016 Sayyam.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and limitation\r\n    under the License.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}